for(i in 1:length(shp)){
plot(shp[[i]], add=T, border=features$cor[i], lwd=2)
}
},
title = 'Plano da Propriedade',
scale.plotepsg = 4326, scale.padin = c(.05,.05),
scale.labelpadin = .025,
drawarrow = T, arrow.padin = c(.05,.05),
arrow.scale = 1,
mai = rep(.5,4))
par(xpd=TRUE)
legend('topleft',
legend = paste('SAF',unique(features$idRecomendacao)),
fill = NA, border = unique(features$cor))
dev.off()
source('C:/Users/Tiago/Desktop/mapR.R', echo=TRUE)
cmd = commandArgs(T)
idPlano = 8
dbhandle = odbcDriverConnect(
'driver={SQL Server};server=18.231.7.174;database=ATER;uid=sa;pwd=Ater_2016#')
baseQuery = "select OBJECTID, idUsuario, flaBorda, nomLocal, idRecomendacao, cor, idBorda, areaHa, Shape.STAsText() as shp from rl.vRLPOLIGONOSAF"
geoQuery = paste(baseQuery, 'where idPlanoPropriedade =', idPlano)
features = sqlQuery(dbhandle, geoQuery, as.is=T)
shp = sapply(features$shp, readWKT, p4s = "+init=epsg:4326")
brd = unique(features$idBorda)
brd
if(!is.na(brd)){
boundQuery = paste(baseQuery, 'where OBJECTID =', brd)
borda = sqlQuery(dbhandle, boundQuery, as.is=T)
bound = readWKT(borda$shp, p4s = "+init=epsg:4326")
}else{
ss = sub(pattern = 'MULTIPOLYGON ', '', features$shp)
multi = paste(ss, collapse = '')
multi = strsplit(multi, '\\)\\(')
multi = paste(multi[[1]], collapse = ',')
bound = readWKT(paste('MULTIPOLYGON', multi), p4s = "+init=epsg:4326")
}
odbcCloseAll()
bound
prettymap({
plot(bound, axes=T, lwd=ifelse(is.na(brd), 0, 1))
for(i in 1:length(shp)){
plot(shp[[i]], add=T, border=features$cor[i], lwd=3)
}
},
title = 'Plano da Propriedade - Rural Legal',
scale.plotepsg = 4326, scale.padin = c(.05,.05),
scale.labelpadin = .025,
drawarrow = T, arrow.padin = c(.05,.05),
arrow.scale = 1,
mai = rep(.5,4))
idPlano = 9
dbhandle = odbcDriverConnect(
'driver={SQL Server};server=18.231.7.174;database=ATER;uid=sa;pwd=Ater_2016#')
baseQuery = "select OBJECTID, idUsuario, flaBorda, nomLocal, idRecomendacao, cor, idBorda, areaHa, Shape.STAsText() as shp from rl.vRLPOLIGONOSAF"
geoQuery = paste(baseQuery, 'where idPlanoPropriedade =', idPlano)
features = sqlQuery(dbhandle, geoQuery, as.is=T)
shp = sapply(features$shp, readWKT, p4s = "+init=epsg:4326")
brd = unique(features$idBorda)
brd
if(!is.na(brd)){
boundQuery = paste(baseQuery, 'where OBJECTID =', brd)
borda = sqlQuery(dbhandle, boundQuery, as.is=T)
bound = readWKT(borda$shp, p4s = "+init=epsg:4326")
}else{
ss = sub(pattern = 'MULTIPOLYGON ', '', features$shp)
multi = paste(ss, collapse = '')
multi = strsplit(multi, '\\)\\(')
multi = paste(multi[[1]], collapse = ',')
bound = readWKT(paste('MULTIPOLYGON', multi), p4s = "+init=epsg:4326")
}
odbcCloseAll()
bound
prettymap({
plot(bound, axes=T, lwd=ifelse(is.na(brd), 0, 1))
for(i in 1:length(shp)){
plot(shp[[i]], add=T, border=features$cor[i], lwd=3)
}
},
title = 'Plano da Propriedade - Rural Legal',
scale.plotepsg = 4326, scale.padin = c(.05,.05),
scale.labelpadin = .025,
drawarrow = T, arrow.padin = c(.05,.05),
arrow.scale = 1,
mai = rep(.5,4))
is.na(brd)
ifelse(is.na(brd), 0, 1)
plot(bound, axes=T, lwd=ifelse(is.na(brd), 0, 1))
plot(bound, axes=T, lwd=ifelse(is.na(brd), NA, 1))
plot(bound, axes=T, lwd=1)
plot(bound, axes=T, lwd=.1)
plot(bound, axes=T, lwd=0)
plot(bound, axes=T, lwd=NULL)
plot(bound, axes=T, lwd=NA)
plot(bound, axes=T, lty=1)
plot(bound, axes=T, lty=0)
dbhandle = odbcDriverConnect(
'driver={SQL Server};server=18.231.7.174;database=ATER;uid=sa;pwd=Ater_2016#')
baseQuery = "select OBJECTID, idUsuario, flaBorda, nomLocal, idRecomendacao, cor, idBorda, areaHa, Shape.STAsText() as shp from rl.vRLPOLIGONOSAF"
geoQuery = paste(baseQuery, 'where idPlanoPropriedade =', idPlano)
features = sqlQuery(dbhandle, geoQuery, as.is=T)
shp = sapply(features$shp, readWKT, p4s = "+init=epsg:4326")
brd = unique(features$idBorda)
if(!is.na(brd)){
boundQuery = paste(baseQuery, 'where OBJECTID =', brd)
borda = sqlQuery(dbhandle, boundQuery, as.is=T)
bound = readWKT(borda$shp, p4s = "+init=epsg:4326")
}else{
ss = sub(pattern = 'MULTIPOLYGON ', '', features$shp)
multi = paste(ss, collapse = '')
multi = strsplit(multi, '\\)\\(')
multi = paste(multi[[1]], collapse = ',')
bound = readWKT(paste('MULTIPOLYGON', multi), p4s = "+init=epsg:4326")
}
odbcCloseAll()
prettymap({
plot(bound, axes=T, lty=ifelse(is.na(brd), 0, 1))
for(i in 1:length(shp)){
plot(shp[[i]], add=T, border=features$cor[i], lwd=3)
}
},
title = 'Plano da Propriedade - Rural Legal',
scale.plotepsg = 4326, scale.padin = c(.05,.05),
scale.labelpadin = .025,
drawarrow = T, arrow.padin = c(.05,.05),
arrow.scale = 1,
mai = rep(.5,4))
print(getwd())
idPlano = 9
dbhandle = odbcDriverConnect(
'driver={SQL Server};server=18.231.7.174;database=ATER;uid=sa;pwd=Ater_2016#')
baseQuery = "select OBJECTID, idUsuario, flaBorda, nomLocal, idRecomendacao, cor, idBorda, areaHa, Shape.STAsText() as shp from rl.vRLPOLIGONOSAF"
geoQuery = paste(baseQuery, 'where idPlanoPropriedade =', idPlano)
features = sqlQuery(dbhandle, geoQuery, as.is=T)
shp = sapply(features$shp, readWKT, p4s = "+init=epsg:4326")
brd = unique(features$idBorda)
if(!is.na(brd)){
boundQuery = paste(baseQuery, 'where OBJECTID =', brd)
borda = sqlQuery(dbhandle, boundQuery, as.is=T)
bound = readWKT(borda$shp, p4s = "+init=epsg:4326")
}else{
ss = sub(pattern = 'MULTIPOLYGON ', '', features$shp)
multi = paste(ss, collapse = '')
multi = strsplit(multi, '\\)\\(')
multi = paste(multi[[1]], collapse = ',')
bound = readWKT(paste('MULTIPOLYGON', multi), p4s = "+init=epsg:4326")
}
odbcCloseAll()
png(filename = str_c('mapas/',idPlano,'.png'), height = 20, width = 20, units = 'cm', res = 200)
prettymap({
plot(bound, axes=T, lty=ifelse(is.na(brd), 0, 1))
for(i in 1:length(shp)){
plot(shp[[i]], add=T, border=features$cor[i], lwd=3)
}
},
title = 'Plano da Propriedade - Rural Legal',
scale.plotepsg = 4326, scale.padin = c(.05,.05),
scale.labelpadin = .025,
drawarrow = T, arrow.padin = c(.05,.05),
arrow.scale = 1,
mai = rep(.5,4))
idReco = unique(features$idRecomendacao)
par(xpd=TRUE)
legend('topleft',
legend = paste('SAF',ifelse(is.na(idReco), 'não atribuído', idReco)),
fill = NA, border = unique(features$cor))
dev.off()
print(getwd())
getwd()
print(getwd())
version
install.packages("OpenStreetMap")
require(OpenStreetMap)
openmap()
openmap(lat <- c(59.7916,59.6563)
lon <- c(10.0937,10.3293)
map <- openmap(c(lat[1],lon[1]),c(lat[2],lon[2]),zoom=10,'osm')
plot(map))
lat <- c(59.7916,59.6563)
lon <- c(10.0937,10.3293)
map <- openmap(c(lat[1],lon[1]),c(lat[2],lon[2]),zoom=10,'osm')
plot(map)
axes()
axis()
axis(1)
axis(2)
axis(3)
axis(5)
axis(4)
a = as.raw(c(71,33))
a
a = as.raw(c(0x71,0x33))
a
strtoi(a)
rawToChar(a)
strtoi('0x7133')
charToRaw('$GPRMC')
strtoi('0x00')
strtoi('0x2b72')
strtoi('0x2b72')/100
strtoi('0x0f46')
strtoi('0x0f46')*2/1000
strtoi('0x0f46')*2/1000
strtoi('0x14')
setwd('../Desktop/pcap2cloud/')
a = read.table('packets.txt', header = T)
head(a)
apply(a, 2, range)
require(rgl)
rgl.points(a[,c('x','y','z')])
axes3d()
require(lidR)
laz = readLAS('n200.laz', select = c('X','Y','Z'))
plot(laz)
apply(laz@data, 2, range)
apply(a, 2, range)
apply(a[,c('x', 'y', 'z')], 2, range)
apply(laz@data, 2, range)
apply(a[,c('x', 'y', 'z')], 2, range)
rgl.points(a[,c('x','y','z')])
a = read.table('packets.txt', header = T)
plot(laz)
rgl.points(a[,c('x','y','z')])
axes3d()
apply(laz@data, 2, range)
apply(a[,c('x', 'y', 'z')], 2, range)
vec = a$y
y = a$y
z = a$z
x = a$x
plot(laz, add=T)
clear3d()
plot3d(laz, add=T)
plot(laz, add=T)
plot(laz, add=T)
rgl.points(a[,c('x','y','z')])
axes3d()
apply(laz@data, 2, range)
apply(a[,c('x', 'y', 'z')], 2, range)
a$z = y
a$y = z
plot(laz)
rgl.points(a[,c('x','y','z')])
axes3d()
apply(laz@data, 2, range)
apply(a[,c('x', 'y', 'z')], 2, range)
plot(laz)
rgl.points(a[,c('x','y','z')])
axes3d()
apply(laz@data, 2, range)
apply(a[,c('x', 'y', 'z')], 2, range)
a$z = x
a$x = z
apply(laz@data, 2, range)
apply(a[,c('x', 'y', 'z')], 2, range)
laz = readLAS('n200.laz', select = c('X','Y','Z'))
a = read.table('packets.txt', header = T)
apply(laz@data, 2, range)
apply(a[,c('x', 'y', 'z')], 2, range)
a$z = y
a$y = z
apply(laz@data, 2, range)
apply(a[,c('x', 'y', 'z')], 2, range)
a = read.table('packets.txt', header = T)
apply(laz@data, 2, range)
apply(a[,c('x', 'y', 'z')], 2, range)
x = a$x
y = a$y
z = a$z
a$x = z
a$y = x
a$z = y
plot(laz)
rgl.points(a[,c('x','y','z')])
axes3d()
apply(laz@data, 2, range)
apply(a[,c('x', 'y', 'z')], 2, range)
laz = readLAS('n200.laz', select = c('X','Y','Z'))
a = read.table('packets.txt', header = T)
apply(laz@data, 2, range)
apply(a[,c('x', 'y', 'z')], 2, range)
x = a$x
y = a$y
z = a$z
apply(laz@data, 2, range)
apply(a[,c('x', 'y', 'z')], 2, range)
a$x = y
a$y = z
a$z = x
plot(laz)
rgl.points(a[,c('x','y','z')])
axes3d()
apply(laz@data, 2, range)
apply(a[,c('x', 'y', 'z')], 2, range)
a$z = -z
plot(laz)
rgl.points(a[,c('x','y','z')])
axes3d()
a = read.table('packets.txt', header = T)
x = a$x
y = a$y
z = a$z
a$x = y
a$y = z
a$z = -x
plot(laz)
rgl.points(a[,c('x','y','z')])
axes3d()
a$z[a$z == 0]
a[a$z == 0]
a[a$z == 0,]
head(a[a$z == 0, c('x', 'y', 'z')])
head(a[a$z == 0, c('x', 'y', 'z')], 20)
nrow(a[a$z == 0, c('x', 'y', 'z')], 20)
nrow(a[a$z == 0, c('x', 'y', 'z')])
apply(a[a$z == 0, c('x', 'y', 'z')], 2, range)
apply(a[abs(a$z) < 0.1, c('x', 'y', 'z')], 2, range)
head(a)
head(a[ abs(a$z) < 0.1 ,])
head(a[ abs(a$z) < 0.1 ,], 30)
head(a[ abs(a$z) < 0.1 ,], 50)
a[ abs(a$z) < 0.1 ,]
View(a[ abs(a$z) < 0.1 ,])
View(a[ abs(a$z) < 0.1 & a$z != 0,])
a = read.table('packets.txt', header = T)
View(a[ abs(a$x) < 0.1 & a$x != 0,])
a = read.table('packets.txt', header = T)
apply(laz@data, 2, range)
apply(a[,c('x', 'y', 'z')], 2, range)
x = a$x
y = a$y
z = a$z
a$x = y
a$y = z
a$z = -x
plot(laz)
rgl.points(a[,c('x','y','z')])
axes3d()
a = read.table('packets.txt', header = T)
apply(laz@data, 2, range)
apply(a[,c('x', 'y', 'z')], 2, range)
x = a$x
y = a$y
z = a$z
a$x = y
a$y = z
a$z = -x
plot(laz)
rgl.points(a[,c('x','y','z')])
axes3d()
a = read.table('packets.txt', header = T)
apply(laz@data, 2, range)
apply(a[,c('x', 'y', 'z')], 2, range)
x = a$x
y = a$y
z = a$z
a$x = y
a$y = z
a$z = -x
plot(laz)
rgl.points(a[,c('x','y','z')])
axes3d()
a = read.table('packets.txt', header = T)
apply(laz@data, 2, range)
apply(a[,c('x', 'y', 'z')], 2, range)
x = a$x
y = a$y
z = a$z
a$x = y
a$y = z
a$z = -x
plot(laz)
rgl.points(a[,c('x','y','z')])
axes3d()
a = read.table('packets.txt', header = T)
apply(laz@data, 2, range)
apply(a[,c('x', 'y', 'z')], 2, range)
x = a$x
y = a$y
z = a$z
a$x = y
a$y = z
a$z = -x
plot(laz)
rgl.points(a[,c('x','y','z')])
axes3d()
clear3d()
rgl.points(a[,c('x','y','z')])
a = read.table('pcap.txt', header = T)
a = read.table('pcap.txt', header = T)
apply(laz@data, 2, range)
apply(a[,c('x', 'y', 'z')], 2, range)
x = a$x
y = a$y
z = a$z
a$x = y
a$y = z
a$z = -x
plot(laz)
rgl.points(a[,c('x','y','z')])
axes3d()
a = readLAS('pcap.laz')
head(a@data)
range(a@data$Intensity)
range(a@data$ScanAngle)
range(a@data$ReturnNumber)
range(a@data$NumberOfReturns)
laz = readLAS('n200.laz')
require(rlas)
rlas::readlasdata('pcap.laz')
a = rlas::readlasdata('pcap.laz')
a$Intensity
a$PointSourceID
a = readLAS('pcap.las')
a@header
a=rlas::readlasdata('pcap.las')
a$UserData
a$ScanDirectionFlag
a$PointSourceID
a$UserData
a=rlas::readlasdata('pcap.las')
a$UserData
range(a$UserData)
a = readLAS('pcap.las')
plot(a)
#rgl.points(a[,c('x','y','z')])
axes3d()
#rgl.points(a[,c('x','y','z')])
axes3d('red')
#rgl.points(a[,c('x','y','z')])
axes3d(col='red')
laz = readLAS('n200.laz', select = c('X', 'Y', 'Z'))
a = readLAS('pcap.las', select = c('X', 'Y', 'Z'))
apply(laz@data, 2, range)
apply(a@data, 2, range)
a = read.table('pcap.txt', header = T)
a
laz = readLAS('n200.laz', select = c('X', 'Y', 'Z'))
a = read.table('pcap.txt', header = T)
apply(laz@data, 2, range)
apply(a@data, 2, range)
x = a$x
y = a$y
z = a$z
a$x = y
a$y = z
a$z = -x
plot(a)
rgl.points(a[,c('x','y','z')])
axes3d(col='white')
plot(laz)
rgl.points(a[,c('x','y','z')])
axes3d(col='white')
a = read.table('pcap.txt', header = T)
apply(laz@data, 2, range)
apply(a@data, 2, range)
x = a$x
y = a$y
z = a$z
a$x = x
a$y = z
a$z = y
plot(laz)
rgl.points(a[,c('x','y','z')])
axes3d(col='white')
a = read.table('pcap.txt', header = T)
apply(laz@data, 2, range)
apply(a@data, 2, range)
x = a$x
y = a$y
z = a$z
a$x = z
a$y = y
a$z = x
plot(laz)
rgl.points(a[,c('x','y','z')])
axes3d(col='white')
rgl.points(a[,c('x','y','z')], size=2)
a = read.table('pcap.txt', header = T)
apply(laz@data, 2, range)
apply(a@data, 2, range)
x = a$x
y = a$y
z = a$z
a$x = y
a$y = z
a$z = -x
plot(laz)
rgl.points(a[,c('x','y','z')], size=2)
axes3d(col='white')
a = read.table('pcap.txt', header = T)
apply(laz@data, 2, range)
apply(a@data, 2, range)
x = a$x
y = a$y
z = a$z
a$x = y
a$y = z
a$z = -x
plot(laz)
rgl.points(a[,c('x','y','z')], size=3)
axes3d(col='white')
plot(laz)
rgl.open()
rgl.points(a[,c('x','y','z')], size=3)
a = read.table('pcap.txt', header = T)
apply(laz@data, 2, range)
apply(a@data, 2, range)
plot(laz)
rgl.points(a[,c('x','y','z')], size=3)
axes3d(col='white')
apply(a, 2, range)
